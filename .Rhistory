)
View(min_sir)
min_sir$solution
min_sir$message
View(R0_min)
View(min_sis)
##################################################################################################
#                                    Minimisation                                               #
#################################################################################################
library("nloptr")
cov_0 <- c(1,1,1)
opts <- list("algorithm" = "NLOPT_LN_COBYLA", "xtol_rel" = 1.0e-8)
R0_min <-
nloptr(
x0 = cov_0,
eval_f = f_min,
eval_g_ineq = g_min,
lb = c(0, 0, 0),
ub = c(1, 1, 1),
opts = opts,
alpha = alpha,
rec = rec,
ro = ro,
N = N,
Vmax = 1.5e6
)
min_sis <-
nloptr(
x0 = cov_0,
eval_f = sis_min ,
eval_g_ineq = g_min,
lb = c(0, 0, 0),
ub = c(1, 1, 1),
opts = opts,
alpha = alpha,
rec = rec,
ro = ro,
N = N,
Vmax = 1.5e6
)
min_sir <-
nloptr(
x0 = cov_0,
eval_f = sir_min ,
eval_g_ineq = g_min,
lb = c(0, 0, 0),
ub = c(1, 1, 1),
opts = opts,
alpha = alpha,
rec = rec,
ro = ro,
N = N,
Vmax = 1.5e6
)
cov_0 <- c(0.5,0.5,0.5)
opts <- list("algorithm" = "NLOPT_LN_COBYLA", "xtol_rel" = 1.0e-8)
min_sir <-
nloptr(
x0 = cov_0,
eval_f = sir_min ,
eval_g_ineq = g_min,
lb = c(0, 0, 0),
ub = c(1, 1, 1),
opts = opts,
alpha = alpha,
rec = rec,
ro = ro,
N = N,
Vmax = 3e6
)
View(min_sir)
cov_0 <- c(0.2,0.5,0.7)
opts <- list("algorithm" = "NLOPT_LN_COBYLA", "xtol_rel" = 1.0e-8)
min_sir <-
nloptr(
x0 = cov_0,
eval_f = sir_min ,
eval_g_ineq = g_min,
lb = c(0, 0, 0),
ub = c(1, 1, 1),
opts = opts,
alpha = alpha,
rec = rec,
ro = ro,
N = N,
Vmax = 3e6
)
View(min_sir)
View(min_sir)
x<- c(1,1,1)
y<- c(3,2,4)
x-y
sum(x-y)
# Load file with all the functions
source ("fcns.R")
min_sir <-
nloptr(
x0 = cov_0,
eval_f = sir_min ,
eval_g_ineq = g_min,
lb = c(0, 0, 0),
ub = c(1, 1, 1),
opts = opts,
alpha = alpha,
rec = rec,
ro = ro,
N = N,
Vmax = 3e6
)
min_sir <-
nloptr(
x0 = cov_0,
eval_f = sir_min ,
eval_g_ineq = g_min,
lb = c(0, 0, 0),
ub = c(1, 1, 1),
opts = opts,
alpha = alpha,
rec = rec,
ro = ro,
N = N,
Vmax = 3e6
)
cov_0 <- c(0.5,0.5,0.5)
min_sir <-
nloptr(
x0 = cov_0,
eval_f = sir_min ,
eval_g_ineq = g_min,
lb = c(0, 0, 0),
ub = c(1, 1, 1),
opts = opts,
alpha = alpha,
rec = rec,
ro = ro,
N = N,
Vmax = 3e6
)
opts <- list("algorithm" = "NLOPT_GN_ISRES", "xtol_rel" = 1.0e-8)
min_sir <-
nloptr(
x0 = cov_0,
eval_f = sir_min ,
eval_g_ineq = g_min,
lb = c(0, 0, 0),
ub = c(1, 1, 1),
opts = opts,
alpha = alpha,
rec = rec,
ro = ro,
N = N,
Vmax = 3e6
)
cov_0 <- c(0.5,0.5,0.5)
min_sis <-
nloptr(
x0 = cov_0,
eval_f = sis_min ,
eval_g_ineq = g_min,
lb = c(0, 0, 0),
ub = c(1, 1, 1),
opts = opts,
alpha = alpha,
rec = rec,
ro = ro,
N = N,
Vmax = 1.5e6
)
min_sir <-
nloptr(
x0 = cov_0,
eval_f = sir_min ,
eval_g_ineq = g_min,
lb = c(0, 0, 0),
ub = c(1, 1, 1),
opts = opts,
alpha = alpha,
rec = rec,
ro = ro,
N = N,
Vmax = 3e6
)
min_sir <-
nloptr(
x0 = cov_0,
eval_f = sir_min ,
eval_g_ineq = g_min,
lb = c(0, 0, 0),
ub = c(1, 1, 1),
opts = opts,
alpha = alpha,
rec = rec,
ro = ro,
N = N,
Vmax = 1.5e6
)
opts <- list("algorithm" = "NLOPT_GN_DIRECT", "xtol_rel" = 1.0e-8)
R0_min <- nloptr(
x0 = cov_0,
eval_f = f_min,
eval_g_ineq = g_min,
lb = c(0, 0, 0),
ub = c(1, 1, 1),
opts = opts,
alpha = alpha,
rec = rec,
ro = ro,
N = N,
Vmax = 1.5e6
)
min_sis <-
nloptr(
x0 = cov_0,
eval_f = sis_min ,
eval_g_ineq = g_min,
lb = c(0, 0, 0),
ub = c(1, 1, 1),
opts = opts,
alpha = alpha,
rec = rec,
ro = ro,
N = N,
Vmax = 1.5e6
)
opts <- list("algorithm" = "NLOPT_GN_DIRECT_L", "xtol_rel" = 1.0e-8)
R0_min <- nloptr(
x0 = cov_0,
eval_f = f_min,
eval_g_ineq = g_min,
lb = c(0, 0, 0),
ub = c(1, 1, 1),
opts = opts,
alpha = alpha,
rec = rec,
ro = ro,
N = N,
Vmax = 1.5e6
)
opts <- list("algorithm" = "NLOPT_LN_COBYLA", "xtol_rel" = 1.0e-8)
R0_min <- nloptr(
x0 = cov_0,
eval_f = f_min,
eval_g_ineq = g_min,
lb = c(0, 0, 0),
ub = c(1, 1, 1),
opts = opts,
alpha = alpha,
rec = rec,
ro = ro,
N = N,
Vmax = 1.5e6
)
min_sis <-
nloptr(
x0 = cov_0,
eval_f = sis_min ,
eval_g_ineq = g_min,
lb = c(0, 0, 0),
ub = c(1, 1, 1),
opts = opts,
alpha = alpha,
rec = rec,
ro = ro,
N = N,
Vmax = 1.5e6
)
min_sir <-
nloptr(
x0 = cov_0,
eval_f = sir_min ,
eval_g_ineq = g_min,
lb = c(0, 0, 0),
ub = c(1, 1, 1),
opts = opts,
alpha = alpha,
rec = rec,
ro = ro,
N = N,
Vmax = 1.5e6
)
cov_0 <- c(0,0,0)
min_sir <-
nloptr(
x0 = cov_0,
eval_f = sir_min ,
eval_g_ineq = g_min,
lb = c(0, 0, 0),
ub = c(1, 1, 1),
opts = opts,
alpha = alpha,
rec = rec,
ro = ro,
N = N,
Vmax = 1.5e6
)
cov_0 <- c(1,0.5,0.6)
min_sir <-
nloptr(
x0 = cov_0,
eval_f = sir_min ,
eval_g_ineq = g_min,
lb = c(0, 0, 0),
ub = c(1, 1, 1),
opts = opts,
alpha = alpha,
rec = rec,
ro = ro,
N = N,
Vmax = 1.5e6
)
cov_range <- seq(0, 1, length.out = 100)
cases_averted <-
data.frame(matrix(1, nrow = length(cov_range), ncol = 3))
colnames (cases_averted) <- c("Low", "Medium", "High")
for (i in c(1:length(cov_range))) {
cov <- c(cov_range[i], cov_range[i], cov_range[i])
R0 <- cov * N
#tryCatch({
print(i)
sir_vacc <-
runModel(
"SIR_vacc.R",
tt,
np = npop,
N = N,
rec = rec,
ro = ro,
alpha = alpha,
I0 = I0,
cov = cov,
vacc_time = 1,
R0 = R0
)
# }, error = function(e) {
#  cat("ERROR :", conditionMessage(e), "\n")
# })
outbreakSize_vacc <- as.numeric(tail(sir_vacc, 1)[1, 11:13])
cases_averted[i, ] <-
100 * (outbreakSize - outbreakSize_vacc) / outbreakSize
}
cases_averted [, 4] <- cov_range
sir_averted = melt(cases_averted, id.vars = "V4")
# Plotting the model
ggplot(sir_averted, aes(x = V4, y = value, col = variable)) + geom_line() + xlab(("Coverage")) + ylab ("% Cases averted") + labs(colour = "Patch")
min_sir <-
nloptr(
x0 = cov_0,
eval_f = sir_min ,
eval_g_ineq = g_min,
lb = c(0, 0, 0),
ub = c(1, 1, 1),
opts = opts,
alpha = alpha,
rec = rec,
ro = ro,
N = N,
Vmax = 1.5e6
)
cov_0 <- c(0.5,0.5,0.5)
min_sir <-
nloptr(
x0 = cov_0,
eval_f = sir_min ,
eval_g_ineq = g_min,
lb = c(0, 0, 0),
ub = c(1, 1, 1),
opts = opts,
alpha = alpha,
rec = rec,
ro = ro,
N = N,
Vmax = 1.5e6
)
View(min_sir)
cov <- min_sir$solution
R0 <- cov * N
sir_vacc <- runModel(
"SIR_vacc.R",
tt,
np = npop,
N = N,
rec = rec,
ro = ro,
alpha = alpha,
I0 = I0,
cov = cov,
vacc_time = 1,
R0 = R0
)
outbreakSize_vacc <- as.numeric(tail(sir_vacc, 1)[1, 11:13])
sir_mult <-   runModel(
"sir_mult.R",
tt,
np = npop,
N = N,
rec = rec,
ro = ro,
alpha = alpha,
I0 = I0
)
outbreakSize <- as.numeric(tail(sir_mult, 1)[1, 11:13])
-100*(sum(outbreakSize -outbreakSize_vacc))/sum(outbreakSize)
-100*(sum(outbreakSize -outbreakSize_vacc))/sum(outbreakSize)
cov <- c(0.5,0.5,0.5)
R0 <- cov * N
sir_vacc <- runModel(
"SIR_vacc.R",
tt,
np = npop,
N = N,
rec = rec,
ro = ro,
alpha = alpha,
I0 = I0,
cov = cov,
vacc_time = 1,
R0 = R0
)
outbreakSize_vacc <- as.numeric(tail(sir_vacc, 1)[1, 11:13])
-100*(sum(outbreakSize -outbreakSize_vacc))/sum(outbreakSize)
opts <- list("algorithm" = "NLOPT_GN_DIRECT_L", "xtol_rel" = 1.0e-8)
min_sir <-
nloptr(
x0 = cov_0,
eval_f = sir_min ,
eval_g_ineq = g_min,
lb = c(0, 0, 0),
ub = c(1, 1, 1),
opts = opts,
alpha = alpha,
rec = rec,
ro = ro,
N = N,
Vmax = 1.5e6
)
min_sir <-
nloptr(
x0 = cov_0,
eval_f = sir_min ,
eval_g_ineq = g_min,
lb = c(0, 0, 0),
ub = c(1, 1, 1),
opts = opts,
alpha = alpha,
rec = rec,
ro = ro,
N = N,
Vmax = 1.5e6
)
min_sir <-
nloptr(
x0 = cov_0,
eval_f = sir_min ,
eval_g_ineq = g_min,
lb = c(0, 0, 0),
ub = c(1, 1, 1),
opts = opts,
alpha = alpha,
rec = rec,
ro = ro,
N = N,
Vmax = 1.5e6
)
install.packages("styler")
install.packages("styler")
knitr::opts_chunk$set(echo = TRUE, eval = TRUE)
# Load function file
source ("fcns.R")
# Installing requiered packages
#if ( !require(ggplot2)) install.packages("ggplot2")
#library(ggplot2)
# General parameters for all the models
npop <- 3
N <- c(1e6, 1e6, 1e6)
rec <- c(0.5, 0.5, 0.5)
ro <- c(1.2, 5, 15)
alpha <-
matrix(
c(1, 0.7, 0.3, 0.7, 1, 0.7, 0.3, 0.7, 1),
nrow = 3,
ncol = 3,
byrow = TRUE
)
I0 <- c(1, 1, 1)
#Time
tt <- seq(0, 100, length.out = 201)
## ----- Basic SIR model  ---->
sir_mult <-   runModel("sir_mult.R",tt,np = npop,N = N,rec = rec,ro = ro,alpha = alpha,I0 = I0)
outbreakSize <- as.numeric(tail(sir_mult, 1)[1, 11:13])
ourbreakSize
## ----- Basic SIR model  ---->
sir_mult <-   runModel("sir_mult.R",tt,np = npop,N = N,rec = rec,ro = ro,alpha = alpha,I0 = I0)
outbreakSize <- as.numeric(tail(sir_mult, 1)[1, 11:13])
outbreakSize
cov_range <- seq(0, 1, length.out = 100)
cases_averted <-   data.frame(matrix(1, nrow = length(cov_range), ncol = 3))
colnames (cases_averted) <- c("Low", "Medium", "High")
for (i in c(1:length(cov_range))) {
cov <- c(cov_range[i], cov_range[i], cov_range[i])
R0 <- cov * N
tryCatch({
sir_vacc <- runModel("SIR_vacc.R", tt,np = npop,N = N, rec = rec,ro = ro, alpha = alpha, I0 = I0,cov = cov, vacc_time = 1,R0 = R0)
}, error = function(e) {
cat("ERROR :", conditionMessage(e), "\n")
})
outbreakSize_vacc <- as.numeric(tail(sir_vacc, 1)[1, 11:13])
cases_averted[i, ] <- 100 * (outbreakSize - outbreakSize_vacc) / outbreakSize
}
cases_averted [, 4] <- cov_range
sir_averted = melt(cases_averted, id.vars = "V4")
# Plotting the model
ggplot(sir_averted, aes(x = V4, y = value, col = variable)) + geom_line() + xlab(("Coverage")) + ylab ("% Cases averted") + labs(colour = "Patch")
