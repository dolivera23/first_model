R0 <- cov * N
sir_vacc <- runModel(
"SIR_vacc.R",
tt,
np = npop,
N = N,
rec = rec,
ro = ro,
alpha = alpha,
I0 = I0,
cov = cov,
vacc_time = 1,
R0 = R0
)
outbreakSize_vacc <- as.numeric(tail(sir_vacc, 1)[1, 11:13])
sir_mult <-   runModel(
"sir_mult.R",
tt,
np = npop,
N = N,
rec = rec,
ro = ro,
alpha = alpha,
I0 = I0
)
outbreakSize <- as.numeric(tail(sir_mult, 1)[1, 11:13])
outbreakSize_vacc - outbreakSize
sum(outbreakSize_vacc - outbreakSize)
sum(outbreakSize)
sum(outbreakSize_vacc - outbreakSize)/sum(outbreakSize)
min_sir$solution
min_sir$objective
# Load file with all the functions
source ("fcns.R")
# General parameters for all the models
npop <- 3
N <- c(1e6, 1e6, 1e6)
rec <- c(0.5, 0.5, 0.5)
ro <- c(1.2, 5, 15)
alpha <-
matrix(
c(1, 0.7, 0.3, 0.7, 1, 0.7, 0.3, 0.7, 1),
nrow = 3,
ncol = 3,
byrow = TRUE
)
I0 <- c(1, 1, 1)
#Time
tt <- seq(0, 100, length.out = 201)
cov_0 <- c(0.9,0.9,0.9)
opts <- list("algorithm" = "NLOPT_LN_COBYLA", "xtol_rel" = 1.0e-8)
min_sir <- nloptr(x0 = cov_0, eval_f = sir_min , eval_g_ineq = g_min, lb = c(0, 0, 0), ub = c(1, 1, 1), opts = opts, alpha = alpha, rec = rec,
ro = ro,N = N,Vmax = 2e6)
cov_0 <- c(0.9,0.9,0.9)
opts <- list("algorithm" = "NLOPT_LN_COBYLA", "xtol_rel" = 1.0e-8)
min_sir <- nloptr(x0 = cov_0, eval_f = sir_min , eval_g_ineq = g_min, lb = c(0, 0, 0), ub = c(1, 1, 1), opts = opts, alpha = alpha, rec = rec,
ro = ro,N = N,Vmax = 2e6)
cov_0 <- c(0.9,0.9,0.9)
opts <- list("algorithm" = "NLOPT_LN_COBYLA", "xtol_rel" = 1.0e-8)
min_sir <- nloptr(x0 = cov_0, eval_f = sir_min , eval_g_ineq = g_min, lb = c(0, 0, 0), ub = c(1, 1, 1), opts = opts, alpha = alpha, rec = rec,
ro = ro,N = N,Vmax = Vmax)
cov <- cov_0
UNI2019-9NT28
sir_mult <- runModel("sir_mult.R", tt, alpha=alpha,rec=rec,ro=ro,N=N, np=npop, I0=I0 )
outbreakSize <- as.numeric(tail(sir_mult, 1)[1,11:13])
npop <- 3
I0 <- c(1,1,1)
R0 <- cov * N
sir_vacc <- runModel("SIR_vacc.R", tt,np=npop, N=N, rec=rec, ro=ro,alpha=alpha,I0=I0, cov=cov, vacc_time=1, R0=R0 )
outbreakSize_vacc <- as.numeric(tail(sir_vacc, 1)[1,11:13])
cov_0 <- c(0.9,0.9,0.9)
opts <- list("algorithm" = "NLOPT_LN_COBYLA", "xtol_rel" = 1.0e-8)
min_sir <- nloptr(x0 = cov_0, eval_f = sir_min , eval_g_ineq = g_min, lb = c(0, 0, 0), ub = c(1, 1, 1), opts = opts, alpha = alpha, rec = rec,
ro = ro,N = N,Vmax = Vmax)
cov_0 <- c(0.5,0.5,0.5)
opts <- list("algorithm" = "NLOPT_LN_COBYLA", "xtol_rel" = 1.0e-8)
Vmax <- 2e6
cov_0 <- c(0.9,0.9,0.9)
opts <- list("algorithm" = "NLOPT_LN_COBYLA", "xtol_rel" = 1.0e-8)
min_sir <- nloptr(x0 = cov_0, eval_f = sir_min , eval_g_ineq = g_min, lb = c(0, 0, 0), ub = c(1, 1, 1), opts = opts, alpha = alpha, rec = rec,
ro = ro,N = N,Vmax = Vmax)
cov_0 <- c(0.9,0.9,0.9)
opts <- list("algorithm" = "NLOPT_LN_COBYLA", "xtol_rel" = 1.0e-8)
min_sir <- nloptr(x0 = cov_0, eval_f = sir_min , eval_g_ineq = g_min, lb = c(0, 0, 0), ub = c(1, 1, 1), opts = opts, alpha = alpha, rec = rec,
ro = ro,N = N,Vmax = Vmax)
cov_0 <- c(0.5,0.5,0.5)
opts <- list("algorithm" = "NLOPT_LN_COBYLA", "xtol_rel" = 1.0e-8)
min_sir <- nloptr(x0 = cov_0, eval_f = sir_min , eval_g_ineq = g_min, lb = c(0, 0, 0), ub = c(1, 1, 1), opts = opts, alpha = alpha, rec = rec,
ro = ro,N = N,Vmax = Vmax)
cov_0 <- c(0.5,0.5,0.5)
opts <- list("algorithm" = "NLOPT_GN_DIRECT", "xtol_rel" = 1.0e-8)
min_sir <- nloptr(x0 = cov_0, eval_f = sir_min , eval_g_ineq = g_min, lb = c(0, 0, 0), ub = c(1, 1, 1), opts = opts, alpha = alpha, rec = rec,
ro = ro,N = N,Vmax = Vmax)
cov_0 <- c(0.5,0.5,0.5)
opts <- list("algorithm" = "NLOPT_GN_DIRECT_L", "xtol_rel" = 1.0e-8)
min_sir <- nloptr(x0 = cov_0, eval_f = sir_min , eval_g_ineq = g_min, lb = c(0, 0, 0), ub = c(1, 1, 1), opts = opts, alpha = alpha, rec = rec,
ro = ro,N = N,Vmax = Vmax)
cov_0 <- c(0.5,0.5,0.5)
opts <- list("algorithm" = "NLOPT_GN_ISRES", "xtol_rel" = 1.0e-8)
min_sir <- nloptr(x0 = cov_0, eval_f = sir_min , eval_g_ineq = g_min, lb = c(0, 0, 0), ub = c(1, 1, 1), opts = opts, alpha = alpha, rec = rec,
ro = ro,N = N,Vmax = Vmax)
min_sir$objective
cov <- min_sir$solution
sir_mult <-   runModel(
"sir_mult.R",
tt,
np = npop,
N = N,
rec = rec,
ro = ro,
alpha = alpha,
I0 = I0
)
outbreakSize <- as.numeric(tail(sir_mult, 1)[1, 11:13])
R0 <- cov * N   #Initialpopulation recovered
sir_vacc <- runModel(
"SIR_vacc.R",
tt,
np = npop,
N = N,
rec = rec,
ro = ro,
alpha = alpha,
I0 = I0,
cov = cov,
vacc_time = 1,
R0 = R0
)
outbreakSize_vacc <- as.numeric(tail(sir_vacc, 1)[1, 11:13])
(outbreakSize - outbreakSize_vacc) / outbreakSize
sum((outbreakSize - outbreakSize_vacc))/sum(outbreakSize)
min_sir
sum((outbreakSize - outbreakSize_vacc))/sum(outbreakSize)
knitr::opts_chunk$set(echo = TRUE, eval = TRUE)
# Load function file
source ("fcns.R")
# Installing requiered packages
if ( !require(rootSolve)) install.packages("rootSolve")
library(rootSolve)
if ( !require(nloptr)) install.packages("nloptr")
library("nloptr")
if ( !require(ggplot2)) install.packages("ggplot2")
library("ggplot2")
# General parameters for all the models
npop <- 3
N <- c(1e6, 1e6, 1e6)
rec <- c(0.5, 0.5, 0.5)
ro <- c(1.2, 5, 15)
alpha <-
matrix(
c(1, 0.1, 0.1, 0.1, 1, 0.1, 0.1, 0.1, 1),
nrow = 3,
ncol = 3,
byrow = TRUE
)
I0 <- c(1, 1, 1)
#Time
tt <- seq(0, 100, length.out = 201)
rep_number <- R0_vacc(alpha, rec, ro, c(0,0,0))
cov_range <- seq(0, 1, length.out = 100)
ro_vec <- data.frame(matrix(0, nrow = length(cov_range), ncol = 1))
for (i in c(1:length(cov_range))) {
cov <- c(cov_range[i], cov_range[i], cov_range[i])
ro_vec[i, 1] <- R0_vacc(alpha, rec, ro, cov)
}
ro_vec [, 2] <- cov_range
colnames(ro_vec) <- c("ro", "cov")
# Plotting the model
ggplot(ro_vec, aes(x = cov, y = ro)) + geom_line() + xlab(("Coverage")) + ylab ("Ro") #+ coord_cartesian(xlim=c(0, 0.9))
## ----- Basic SIR model  ---->
sir_mult <- runModel("sir_mult.R",tt,np = npop,N = N,rec = rec,ro = ro,alpha = alpha,I0 = I0)
outbreakSize <- tail(sir_mult, 1)[1, 11:13]
colnames(outbreakSize) <- c("Low transmission", "Medium transmission", "High transmission")
outbreakSize <- as.numeric (outbreakSize)
cov_range <- seq(0, 1, length.out = 100)
cases_averted <-   data.frame(matrix(1, nrow = length(cov_range), ncol = 3))
colnames (cases_averted) <- c("Low", "Medium", "High")
for (i in c(1:length(cov_range))) {
cov <- c(cov_range[i], cov_range[i], cov_range[i])
R0 <- cov * N
tryCatch({
sir_vacc <- runModel("SIR_vacc.R", tt,np = npop,N = N, rec = rec,ro = ro, alpha = alpha, I0 = I0,cov = cov, vacc_time = 1,R0 = R0)
}, error = function(e) {
cat("ERROR :", conditionMessage(e), "\n")
})
outbreakSize_vacc <- as.numeric(tail(sir_vacc, 1)[1, 11:13])
cases_averted[i, ] <- 100 * (outbreakSize - outbreakSize_vacc) / outbreakSize
}
cases_averted [, 4] <- cov_range
sir_averted = melt(cases_averted, id.vars = "V4")
# Plotting the model
ggplot(sir_averted, aes(x = V4, y = value, col = variable)) + geom_line() + xlab(("Coverage")) + ylab ("% Cases averted") + labs(colour = "Patch")
#Steady state
ss <- multiroot(f = SS_SIS, start = c(1e6, 1e6, 1e6), alpha = alpha, ro = ro, rec = rec,N = N)
endemic <- ss$root
cov_range <- seq(0, 1, length.out = 100)
cases_averted_sis <- data.frame(matrix(0, nrow = length(cov_range), ncol = 3))
colnames (cases_averted_sis) <- c("Low", "Medium", "High")
for (i in c(1:length(cov_range))) {
cov <- c(cov_range[i], cov_range[i], cov_range[i])
ss_vacc <-  multiroot(f = SS_SIS_Vacc, start = c(1e6, 1e6, 1e6),alpha = alpha, ro = ro,rec = rec,N = N,cov = cov)
I_vacc <- ss_vacc$root
cases_averted_sis [i, ] <- 100 * (ss$root - ss_vacc$root) / ss$root
}
cases_averted_sis [, 4] <- cov_range
sis_averted = melt(cases_averted_sis, id.vars = "V4")
# Plotting the model
ggplot(sis_averted, aes(x = V4, y = value, col = variable)) + geom_line() + xlab(("Coverage")) + ylab ("% Cases averted") + labs(colour = "Patch")#+ coord_cartesian(xlim=c(0, 0.9))
# Algorithms that work: NLOPT_LN_COBYLA - NLOPT_GN_ISRES - NLOPT_GN_DIRECT - NLOPT_GN_DIRECT_L
cov_0 <- c(0.5,0.5,0.5)
opts <- list("algorithm" = "NLOPT_GN_ISRES", "xtol_rel" = 1.0e-8)
Vmax <- 2e6
R0_min <- nloptr(x0 = cov_0,eval_f = f_min,eval_g_ineq = g_min, lb = c(0, 0, 0), ub = c(1, 1, 1), opts = opts, alpha = alpha, rec = rec,ro = ro,
N = N, Vmax = Vmax)
min_sis <-  nloptr(x0 = cov_0,eval_f = sis_min, eval_g_ineq = g_min,lb = c(0, 0, 0),ub = c(1, 1, 1),opts = opts,alpha = alpha,rec = rec,
ro = ro,N = N,Vmax = Vmax)
cov_0 <- c(0.5,0.5,0.5)
opts <- list("algorithm" = "NLOPT_GN_ISRES", "xtol_rel" = 1.0e-8)
min_sir <- nloptr(x0 = cov_0, eval_f = sir_min , eval_g_ineq = g_min, lb = c(0, 0, 0), ub = c(1, 1, 1), opts = opts, alpha = alpha, rec = rec,
ro = ro,N = N,Vmax = Vmax)
R0_min$solution
min_sis$solution
min_sir$solution
knitr::opts_chunk$set(echo = TRUE, eval = TRUE)
# Load function file
source ("fcns.R")
# Installing requiered packages
if ( !require(rootSolve)) install.packages("rootSolve")
library(rootSolve)
if ( !require(nloptr)) install.packages("nloptr")
library("nloptr")
if ( !require(ggplot2)) install.packages("ggplot2")
library("ggplot2")
# General parameters for all the models
npop <- 3
N <- c(1e6, 1e6, 1e6)
rec <- c(0.5, 0.5, 0.5)
ro <- c(5, 5, 5)
alpha <-
matrix(
c(1, 0.1, 0.1, 0.1, 1, 0.1, 0.1, 0.1, 1),
nrow = 3,
ncol = 3,
byrow = TRUE
)
I0 <- c(1, 1, 1)
#Time
tt <- seq(0, 100, length.out = 201)
rep_number <- R0_vacc(alpha, rec, ro, c(0,0,0))
R0 <- function (alpha, rec, ro) {
# Rate of infection
beta <- ro * rec
beta[1] <- beta[1] * (1-alpha[3,1]-alpha[2,1]+alpha[1,3]+alpha[1,2])
beta[2] <- beta[2] * (1- alpha[1,2]-alpha[3,2]+alpha[2,1]+alpha[2,3])
beta[3] <- beta[3] * (1-alpha[1,3]-alhpa[2,3]+alpha[3,1]+alpha[3,2])
# Transmission matrix
firstRow <- c(beta[1] * alpha[1, 1] / rec[1], beta[1] * alpha[1, 2] / rec[2], beta[1] * alpha[1, 3] / rec[3])
secondRow <- c(beta[2] * alpha[2, 1] / rec[1], beta[2] * alpha[2, 2] / rec[2], beta[2] * alpha[2, 3] / rec[3])
thirdRow <- c(beta[3] * alpha[3, 1] / rec[1], beta[3] * alpha[3, 2] / rec[2], beta[3] * alpha[3, 3] / rec[3])
T <-
as.matrix(data.frame(firstRow, secondRow, thirdRow), byrow = TRUE)
x <- eigen(T)
ro <- max(x$values)
return(ro)
}
### This function estimates the basic reproductive number for a metapopulation with three patches
#   and with a SIR and SIS dynamics. It uses the Next Generation Matrix
#   @param alpha I a matrix 3x3 with the interaction between patches
#   @param rec Recovery rates for each path
#   @param ro Basic reproductive of each patch if it were isolated
R0 <- function (alpha, rec, ro) {
# Rate of infection
beta <- ro * rec
beta[1] <- beta[1] * (1-alpha[3,1]-alpha[2,1]+alpha[1,3]+alpha[1,2])
beta[2] <- beta[2] * (1- alpha[1,2]-alpha[3,2]+alpha[2,1]+alpha[2,3])
beta[3] <- beta[3] * (1-alpha[1,3]-alpha[2,3]+alpha[3,1]+alpha[3,2])
# Transmission matrix
firstRow <- c(beta[1] * alpha[1, 1] / rec[1], beta[1] * alpha[1, 2] / rec[2], beta[1] * alpha[1, 3] / rec[3])
secondRow <- c(beta[2] * alpha[2, 1] / rec[1], beta[2] * alpha[2, 2] / rec[2], beta[2] * alpha[2, 3] / rec[3])
thirdRow <- c(beta[3] * alpha[3, 1] / rec[1], beta[3] * alpha[3, 2] / rec[2], beta[3] * alpha[3, 3] / rec[3])
T <-
as.matrix(data.frame(firstRow, secondRow, thirdRow), byrow = TRUE)
x <- eigen(T)
ro <- max(x$values)
return(ro)
}
knitr::opts_chunk$set(echo = TRUE, eval = TRUE)
# Load function file
source ("fcns.R")
# Installing requiered packages
if ( !require(rootSolve)) install.packages("rootSolve")
library(rootSolve)
if ( !require(nloptr)) install.packages("nloptr")
library("nloptr")
if ( !require(ggplot2)) install.packages("ggplot2")
library("ggplot2")
# General parameters for all the models
npop <- 3
N <- c(1e6, 1e6, 1e6)
rec <- c(0.5, 0.5, 0.5)
ro <- c(5, 5, 5)
alpha <-
matrix(
c(1, 0.1, 0.1, 0.1, 1, 0.1, 0.1, 0.1, 1),
nrow = 3,
ncol = 3,
byrow = TRUE
)
I0 <- c(1, 1, 1)
#Time
tt <- seq(0, 100, length.out = 201)
rep_number <- R0_vacc(alpha, rec, ro, c(0,0,0))
rep_number <- R0_vacc(alpha, rec, ro, c(0,0,0))
rep_number <- R0(alpha, rec, ro)
rep_number <- R0(alpha, rec, ro)
rep_number <- R0(alpha, rec, ro)
R0 <- function (alpha, rec, ro) {
# Rate of infection
beta <- ro * rec
beta[1] <- beta[1] * (1-alpha[3,1]-alpha[2,1])
beta[2] <- beta[2] * (1- alpha[1,2]-alpha[3,2])
beta[3] <- beta[3] * (1-alpha[1,3]-alpha[2,3])
# Transmission matrix
firstRow <- c(beta[1] * alpha[1, 1] / rec[1], beta[1] * alpha[1, 2] / rec[2], beta[1] * alpha[1, 3] / rec[3])
secondRow <- c(beta[2] * alpha[2, 1] / rec[1], beta[2] * alpha[2, 2] / rec[2], beta[2] * alpha[2, 3] / rec[3])
thirdRow <- c(beta[3] * alpha[3, 1] / rec[1], beta[3] * alpha[3, 2] / rec[2], beta[3] * alpha[3, 3] / rec[3])
T <-
as.matrix(data.frame(firstRow, secondRow, thirdRow), byrow = TRUE)
x <- eigen(T)
ro <- max(x$values)
return(ro)
}
rep_number <- R0(alpha, rec, ro)
alpha
beta <- ro * rec
beta[1] <- beta[1] * (1-alpha[3,1]-alpha[2,1])
beta[2] <- beta[2] * (1- alpha[1,2]-alpha[3,2])
beta[3] <- beta[3] * (1-alpha[1,3]-alpha[2,3])
beta <- ro * rec
beta[1] <- beta[1] * (1-alpha[3,1]-alpha[2,1])
beta[2] <- beta[2] * (1- alpha[1,2]-alpha[3,2])
beta[3] <- beta[3] * (1-alpha[1,3]-alpha[2,3])
# Transmission matrix
firstRow <- c(beta[1] * alpha[1, 1] / rec[1], beta[1] * alpha[1, 2] / rec[2], beta[1] * alpha[1, 3] / rec[3])
secondRow <- c(beta[2] * alpha[2, 1] / rec[1], beta[2] * alpha[2, 2] / rec[2], beta[2] * alpha[2, 3] / rec[3])
thirdRow <- c(beta[3] * alpha[3, 1] / rec[1], beta[3] * alpha[3, 2] / rec[2], beta[3] * alpha[3, 3] / rec[3])
T <-
as.matrix(data.frame(firstRow, secondRow, thirdRow), byrow = TRUE)
x <- eigen(T)
ro <- max(x$values)
View(`T`)
# Transmission matrix
firstRow <- c(beta[1]* (1-alpha[3,1]-alpha[2,1]) * alpha[1, 1] / rec[1], beta[1] * alpha[1, 2] / rec[2], beta[1] * alpha[1, 3] / rec[3])
secondRow <- c(beta[2]* (1- alpha[1,2]-alpha[3,2]) * alpha[2, 1] / rec[1], beta[2] * alpha[2, 2] / rec[2], beta[2] * alpha[2, 3] / rec[3])
thirdRow <- c(beta[3] * (1-alpha[1,3]-alpha[2,3]) * alpha[3, 1] / rec[1], beta[3] * alpha[3, 2] / rec[2], beta[3] * alpha[3, 3] / rec[3])
beta <- ro * rec
# Transmission matrix
firstRow <- c(beta[1]* (1-alpha[3,1]-alpha[2,1]) * alpha[1, 1] / rec[1], beta[1] * alpha[1, 2] / rec[2], beta[1] * alpha[1, 3] / rec[3])
secondRow <- c(beta[2]* (1- alpha[1,2]-alpha[3,2]) * alpha[2, 1] / rec[1], beta[2] * alpha[2, 2] / rec[2], beta[2] * alpha[2, 3] / rec[3])
thirdRow <- c(beta[3] * (1-alpha[1,3]-alpha[2,3]) * alpha[3, 1] / rec[1], beta[3] * alpha[3, 2] / rec[2], beta[3] * alpha[3, 3] / rec[3])
View(`T`)
knitr::opts_chunk$set(echo = TRUE, eval = TRUE)
# Load function file
source ("fcns.R")
# Installing requiered packages
if ( !require(rootSolve)) install.packages("rootSolve")
library(rootSolve)
if ( !require(nloptr)) install.packages("nloptr")
library("nloptr")
if ( !require(ggplot2)) install.packages("ggplot2")
library("ggplot2")
# General parameters for all the models
npop <- 3
N <- c(1e6, 1e6, 1e6)
rec <- c(0.5, 0.5, 0.5)
ro <- c(5, 5, 5)
alpha <-
matrix(
c(1, 0.1, 0.1, 0.1, 1, 0.1, 0.1, 0.1, 1),
nrow = 3,
ncol = 3,
byrow = TRUE
)
I0 <- c(1, 1, 1)
#Time
tt <- seq(0, 100, length.out = 201)
# Rate of infection
beta <- ro * rec
firstRow <- c(beta[1]* (1-alpha[3,1]-alpha[2,1]) * alpha[1, 1] / rec[1], beta[1] * alpha[1, 2] / rec[2], beta[1] * alpha[1, 3] / rec[3])
secondRow <- c(beta[2]* (1- alpha[1,2]-alpha[3,2]) * alpha[2, 1] / rec[1], beta[2] * alpha[2, 2] / rec[2], beta[2] * alpha[2, 3] / rec[3])
thirdRow <- c(beta[3] * (1-alpha[1,3]-alpha[2,3]) * alpha[3, 1] / rec[1], beta[3] * alpha[3, 2] / rec[2], beta[3] * alpha[3, 3] / rec[3])
T <-     as.matrix(data.frame(firstRow, secondRow, thirdRow), byrow = TRUE)
x <- eigen(T)
ro <- max(x$values)
# General parameters for all the models
npop <- 3
N <- c(1e6, 1e6, 1e6)
rec <- c(0.5, 0.5, 0.5)
ro <- c(5, 5, 5)
alpha <-
matrix(
c(1, 0.1, 0.1, 0.1, 1, 0.1, 0.1, 0.1, 1),
nrow = 3,
ncol = 3,
byrow = TRUE
)
I0 <- c(1, 1, 1)
#Time
tt <- seq(0, 100, length.out = 201)
beta <- ro * rec
# Transmission matrix
firstRow <- c(beta[1]* (1-alpha[3,1]-alpha[2,1]) * alpha[1, 1] / rec[1], beta[1] * alpha[1, 2] / rec[2], beta[1] * alpha[1, 3] / rec[3])
secondRow <- c(beta[2] * alpha[2, 1] / rec[1], beta[2] * alpha[2, 2] * (1- alpha[1,2]-alpha[3,2])/ rec[2], beta[2] * alpha[2, 3] / rec[3])
thirdRow <- c(beta[3]* alpha[3, 1] / rec[1], beta[3] * alpha[3, 2] / rec[2], beta[3] * alpha[3, 3] * (1-alpha[1,3]-alpha[2,3])  / rec[3])
T <-     as.matrix(data.frame(firstRow, secondRow, thirdRow), byrow = TRUE)
View(`T`)
x <- eigen(T)
ro <- max(x$values)
knitr::opts_chunk$set(echo = TRUE, eval = TRUE)
# Load function file
source ("fcns.R")
# Installing requiered packages
if ( !require(rootSolve)) install.packages("rootSolve")
library(rootSolve)
if ( !require(nloptr)) install.packages("nloptr")
library("nloptr")
if ( !require(ggplot2)) install.packages("ggplot2")
library("ggplot2")
# General parameters for all the models
npop <- 3
N <- c(1e6, 1e6, 1e6)
rec <- c(0.5, 0.5, 0.5)
ro <- c(5, 5, 5)
alpha <-
matrix(
c(1, 0.1, 0.1, 0.1, 1, 0.1, 0.1, 0.1, 1),
nrow = 3,
ncol = 3,
byrow = TRUE
)
I0 <- c(1, 1, 1)
#Time
tt <- seq(0, 100, length.out = 201)
# General parameters for all the models
npop <- 3
N <- c(1e6, 1e6, 1e6)
rec <- c(0.5, 0.5, 0.5)
ro <- c(1.5, 5, 15)
alpha <-
matrix(
c(1, 0.1, 0.1, 0.1, 1, 0.1, 0.1, 0.1, 1),
nrow = 3,
ncol = 3,
byrow = TRUE
)
I0 <- c(1, 1, 1)
#Time
tt <- seq(0, 100, length.out = 201)
rep_number <- R0(alpha, rec, ro)
ro <- 5
beta <- ro * rec
# Transmission matrix
firstRow <- c(beta[1]* (1-alpha[3,1]-alpha[2,1]) * alpha[1, 1] / rec[1], beta[1] * alpha[1, 2] / rec[2], beta[1] * alpha[1, 3] / rec[3])
secondRow <- c(beta[2] * alpha[2, 1] / rec[1], beta[2] * alpha[2, 2] * (1- alpha[1,2]-alpha[3,2])/ rec[2], beta[2] * alpha[2, 3] / rec[3])
thirdRow <- c(beta[3]* alpha[3, 1] / rec[1], beta[3] * alpha[3, 2] / rec[2], beta[3] * alpha[3, 3] * (1-alpha[1,3]-alpha[2,3])  / rec[3])
T <-     as.matrix(data.frame(firstRow, secondRow, thirdRow), byrow = TRUE)
x <- eigen(T)
ro <- max(x$values)
return(ro)
beta <- ro * rec
beta <- ro * rec
beta[1] <- beta[1]* (1-alpha[3,1]-alpha[2,1])
beta[2] <- beta[2] * (1- alpha[1,2]-alpha[3,2])
beta[3] <- beta[3] * (1-alpha[1,3]-alpha[2,3])
firstRow <- c(beta[1] * alpha[1, 1] / rec[1], beta[1] * alpha[1, 2] / rec[2], beta[1] * alpha[1, 3] / rec[3])
secondRow <- c(beta[2] * alpha[2, 1] / rec[1], beta[2] * alpha[2, 2]/ rec[2], beta[2] * alpha[2, 3] / rec[3])
thirdRow <- c(beta[3]* alpha[3, 1] / rec[1], beta[3] * alpha[3, 2] / rec[2], beta[3] * alpha[3, 3]   / rec[3])
T <-     as.matrix(data.frame(firstRow, secondRow, thirdRow), byrow = TRUE)
x <- eigen(T)
source('C:/Users/Daniela Olivera Mesa/OneDrive - Imperial College London/PhD/Codes/Basic model/Coverage_screening.R', echo=TRUE)
vMax <- 2e6
which((C[,1]*N[1]+ C[,2]*N[2]+ C[,3]*N[3])<vMax)
susbet(C,(C[,1]*N[1]+ C[,2]*N[2]+ C[,3]*N[3])<vMax)
sub <- subset(C,(C[,1]*N[1]+ C[,2]*N[2]+ C[,3]*N[3])<vMax)
Vmax <- 2e6
sub <- subset(C,(C[,1]*N[1]+ C[,2]*N[2]+ C[,3]*N[3])<Vmax)
library(scatterplot3d)
attach(sub)
scatterplot3d(C[,1],C[,2],C[,4] ,main="3D Scatterplot")
Vmax <- 2e6
sub <- subset(C,(C[,1]*N[1]+ C[,2]*N[2]+ C[,3]*N[3])<Vmax && C[,4]<1)
View(sub)
Vmax <- 2.2e5
sub <- subset(C,(C[,1]*N[1]+ C[,2]*N[2]+ C[,3]*N[3])<Vmax && C[,4]<1)
View(sub)
Vmax <- 2e6
sub <- subset(C,(C[,1]*N[1]+ C[,2]*N[2]+ C[,3]*N[3])<Vmax)
newdata <- sub[order(C[,4]),]
View(newdata)
newdata <- sub[order(sub[,4]),]
View(newdata)
source('C:/Users/Daniela Olivera Mesa/OneDrive - Imperial College London/PhD/Codes/Basic model/Coverage_screening.R', echo=TRUE)
source('C:/Users/Daniela Olivera Mesa/OneDrive - Imperial College London/PhD/Codes/Basic model/Coverage_screening.R', echo=TRUE)
View(C)
Vmax <- 2e6
sub <- subset(C,(C[,1]*N[1]+ C[,2]*N[2]+ C[,3]*N[3])<Vmax)
newdata <- sub[order(sub[,4]),]
View(newdata)
i
source('C:/Users/Daniela Olivera Mesa/OneDrive - Imperial College London/PhD/Codes/Basic model/Coverage_screening.R', echo=TRUE)
source('C:/Users/Daniela Olivera Mesa/OneDrive - Imperial College London/PhD/Codes/Basic model/Coverage_screening.R', echo=TRUE)
View(newdata)
